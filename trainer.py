# -*- coding: utf-8 -*-
"""trainer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V_dJM5DX8i6pp0WRveoKV2vxKcbB4vsG
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import joblib

class LoanModelTrainer:
    def __init__(self, dataset_path, model_path="loan_model.pkl"):
        self.dataset_path = dataset_path
        self.model_path = model_path
        self.model = RandomForestClassifier(random_state=42)

    def load_and_clean_data(self):
        # Load data
        df = pd.read_csv(self.dataset_path)

        # Convert Yes/No to 1/0
        if 'previous_loan_defaults_on_file' in df.columns:
            df['previous_loan_defaults_on_file'] = df['previous_loan_defaults_on_file'].map({'Yes': 1, 'No': 0})

        # Fill missing values
        for col in ['person_emp_exp', 'loan_int_rate', 'credit_score']:
            if col in df.columns:
                df[col].fillna(df[col].median(), inplace=True)

        # One-hot encode categorical features
        categorical_cols = ['person_gender', 'person_education', 'person_home_ownership', 'loan_intent']
        for col in categorical_cols:
            if col in df.columns:
                df[col] = df[col].astype(str)

        df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

        # Split features and target
        if 'loan_status' not in df.columns:
            raise ValueError("Kolom 'loan_status' tidak ditemukan.")

        X = df.drop(columns=['loan_status'])
        y = df['loan_status']
        return train_test_split(X, y, test_size=0.2, random_state=42)

    def train(self):
        X_train, X_test, y_train, y_test = self.load_and_clean_data()
        self.model.fit(X_train, y_train)
        acc = self.model.score(X_test, y_test)
        print(f"Akurasi model: {acc:.4f}")
        joblib.dump(self.model, self.model_path)
        print(f"Model disimpan sebagai: {self.model_path}")

if __name__ == "__main__":
    trainer = LoanModelTrainer(dataset_path="Dataset_A_loan.csv")
    trainer.train()

